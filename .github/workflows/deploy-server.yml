name: Deploy Server to AWS ECS

on:
  push:
    branches:
      - develop
    paths:
      - "packages/server/**"
      - ".github/workflows/deploy-server.yml"
      - "pnpm-lock.yaml"
      - "package.json"
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: blog-aws-practice-server
  ECS_SERVICE: blog-aws-practice-server
  ECS_CLUSTER: blog-aws-practice-cluster
  ECS_TASK_DEFINITION: blog-aws-practice-task
  CONTAINER_NAME: blog-aws-practice-server

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # „É¢„Éé„É¨„Éù„ÅÆ„É´„Éº„Éà„Åã„Çâ„Éì„É´„ÉâÔºàAMD64„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ÂØæÂøúÔºâ
          docker build --platform linux/amd64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f packages/server/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create new task definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # ÁèæÂú®„ÅÆ„Çø„Çπ„ÇØÂÆöÁæ©„ÇíÂèñÂæó
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition \
            --region ${{ env.AWS_REGION }} > task-definition.json

          # „Ç§„É°„Éº„Ç∏„ÇíÊñ∞„Åó„ÅÑ„Çø„Ç∞„Å´Êõ¥Êñ∞
          NEW_IMAGE="${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          CORS_ORIGIN="https://blog-aws-practice-frontend.mrcdsamg63.workers.dev"

          jq --arg IMAGE "$NEW_IMAGE" --arg CORS "$CORS_ORIGIN" \
            '.containerDefinitions[0].image = $IMAGE |
             (.containerDefinitions[0].environment[] | select(.name == "CORS_ORIGIN")).value = $CORS |
             del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' \
            task-definition.json > new-task-definition.json

          # Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØÂÆöÁæ©„ÇíÁôªÈå≤
          aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --region ${{ env.AWS_REGION }} > /dev/null

          echo "Task definition updated with image: $NEW_IMAGE"
          echo "task-definition-arn=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition.taskDefinitionArn --output text --region ${{ env.AWS_REGION }})" >> $GITHUB_OUTPUT

      - name: Update ECS service with new task definition
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: Verify deployment
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Image: ${{ steps.build-image.outputs.image }}"
          echo "Service: ${{ env.ECS_SERVICE }}"
          echo "Cluster: ${{ env.ECS_CLUSTER }}"

          # „Çµ„Éº„Éì„Çπ„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÁ¢∫Ë™ç
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].{DesiredCount:desiredCount,RunningCount:runningCount,Status:status}' \
            --output table

          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          echo "Waiting for ALB to register new tasks..."
          sleep 30

          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://blog-aws-practice-alb-169089192.ap-northeast-1.elb.amazonaws.com/health || echo "Failed")

          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "‚úÖ Health check passed! Application is running."
          else
            echo "‚ö†Ô∏è Health check returned: $HEALTH_STATUS"
            echo "Please verify the deployment manually."
          fi
